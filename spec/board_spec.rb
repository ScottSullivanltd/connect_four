require './lib/board'
require 'pry'

RSpec.describe Board do
  it "creates an instance of board class" do
    new_board = Board.new
    expect(new_board).to be_an_instance_of(Board)
  end

  it "prints a new board" do

    new_board = Board.new

    expect(new_board.print_board).to eq([[" A", " B", " C", " D", " E", " F", " G"],
    [" ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", "."],
    [" ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", "."],
    [" ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", "."],
    [" ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", "."],
    [" ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", "."],
    [" ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", "."]])
  end

  it 'checks for a winner horizontally' do
    board = Board.new
    board.board_array = [[" A", " B", " C", " D", " E", " F", " G"],
    [" ", "X", " ", "X", " ", "X", " ", "X", " ", ".", " ", ".", " ", "."],
    [" ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", "."],
    [" ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", "."],
    [" ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", "."],
    [" ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", "."],
    [" ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", "."]]

    expect(board.horizontal_method).to eq(["X", "X", "X", "X"])
  end

  it 'checks for a winner vertically' do
    board = Board.new
    board.board_array = [[" A", " B", " C", " D", " E", " F", " G"],
    [" ", "X", " ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", "."],
    [" ", "X", " ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", "."],
    [" ", "X", " ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", "."],
    [" ", "X", " ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", "."],
    [" ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", "."],
    [" ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", "."]]

    expect(board.vertical_method).to eq(["X", "X", "X", "X"])
  end

  it 'checks for a winner diagonally' do
    board = Board.new
    board.board_array = [[" A", " B", " C", " D", " E", " F", " G"],
    [" ", "X", " ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", "."],
    [" ", ".", " ", "X", " ", ".", " ", ".", " ", ".", " ", ".", " ", "."],
    [" ", ".", " ", ".", " ", "X", " ", ".", " ", ".", " ", ".", " ", "."],
    [" ", ".", " ", ".", " ", ".", " ", "X", " ", ".", " ", ".", " ", "."],
    [" ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", "."],
    [" ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", "."]]

    expect(board.diagonal_method).to eq(["X", "X", "X", "X"])
  end

  it 'checks for a winner across all win methods' do
    board = Board.new
    board.board_array = [[" A", " B", " C", " D", " E", " F", " G"],
    [" ", "X", " ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", "."],
    [" ", ".", " ", "X", " ", ".", " ", ".", " ", ".", " ", ".", " ", "."],
    [" ", ".", " ", ".", " ", "X", " ", ".", " ", ".", " ", ".", " ", "."],
    [" ", ".", " ", ".", " ", ".", " ", "X", " ", ".", " ", ".", " ", "."],
    [" ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", "."],
    [" ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", "."]]

    expect(board.is_winner?).to eq("X")
  end

end
